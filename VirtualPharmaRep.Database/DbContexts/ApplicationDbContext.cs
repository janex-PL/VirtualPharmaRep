using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using VirtualPharmaRep.Data.Entities;
using VirtualPharmaRep.Data.Entities.Interfaces;
using VirtualPharmaRep.Database.Audit;

namespace VirtualPharmaRep.Database.DbContexts
{
    /// <summary>
    /// Database context
    /// </summary>
    public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
    {
        private readonly IHttpContextAccessor _httpContextAccessor;

        #region DbSets

        public DbSet<Clinic> Clinics { get; set; }
        public DbSet<Doctor> Doctors { get; set; }
        public DbSet<DoctorEmployment> DoctorEmployments { get; set; }
        public DbSet<DrugCategory> DrugCategories { get; set; }
        public DbSet<Drug> Drugs { get; set; }
        public DbSet<DrugProperty> DrugProperties { get; set; }
        public DbSet<DrugPropertyReport> DrugPropertyReports { get; set; }
        public DbSet<DrugReport> DrugReports { get; set; }
        public DbSet<Team> Teams { get; set; }
        public DbSet<TeamMember> TeamMembers { get; set; }
        public DbSet<Visit> Visits { get; set; }

        #endregion

        #region Constructor

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options, IHttpContextAccessor httpContextAccessor)
            : base(options)
        {
            _httpContextAccessor = httpContextAccessor;
        }

        #endregion

        #region Database tables and entity relationships

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
        }

        #endregion

        public async Task<bool> IsForeignKeyValid<T>(object id) where T : class
        {
            return typeof(T) == typeof(ApplicationUser)
                ? await Set<T>().FindAsync((string)id) != null
                : await Set<T>().FindAsync((int)id) != null;

        }

        public async Task<int> SaveChangesAsyncNoAudit()
        {
            ChangeTracker.DetectChanges();
            SoftDeleteEntities(ChangeTracker.Entries().Where(e => e.State == EntityState.Deleted));
            return await SaveChangesAsync();
        }

        public async Task<int> SaveChangesAsyncWithAudit(string userId)
        {
            var auditEntries = await OnBeforeSaveChanges(userId);
            var result = await SaveChangesAsync();
            await OnAfterSaveChanges(auditEntries);
            return result;
        }

        private async Task<List<AuditEntry>> OnBeforeSaveChanges(string userId)
        {
            ChangeTracker.DetectChanges();
            
            var markedAsDeleted = ChangeTracker.Entries().Where(e => e.State == EntityState.Deleted);
            SoftDeleteEntities(markedAsDeleted);
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is AuditEntity || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditEntry(entry) {TableName = entry.Metadata.GetTableName()};
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    var propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.OriginalValue == null && property.CurrentValue == null)
                                continue;

                            if (property.OriginalValue == null ||
                                property.CurrentValue == null ||
                                !property.OriginalValue.Equals(property.CurrentValue))
                            {
                                entry.OriginalValues.SetValues(await entry.GetDatabaseValuesAsync());
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                auditEntry.UserId = userId;
                await Set<AuditEntity>().AddAsync(auditEntry.ToAudit());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChanges(IReadOnlyCollection<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                if (_httpContextAccessor?.HttpContext != null)
                    auditEntry.UserId =
                        _httpContextAccessor.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);
                // Save the Audit entry
                Set<AuditEntity>().Add(auditEntry.ToAudit());
            }

            return SaveChangesAsync();
        }

        private static void SoftDeleteEntities(IEnumerable<EntityEntry> markedAsDeleted)
        {
            foreach (var entry in markedAsDeleted)
            {
                if (!(entry.Entity is ISoftDeletable entity)) continue;
                entry.State = EntityState.Unchanged;
                entity.IsDeleted = true;
            }
        }
    }
}